AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Bedrock streamlit application ECR repository, ECS service and ALB creation stack
Parameters:
  ResourceName:
    Type: String
    AllowedPattern: '^[a-z0-9\-]+$'
    Default: "bedrock-streamlit"
  ApplicationLoadBalancerCIDRWhitelist:
    Type: String
    Default: "0.0.0.0/0"
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  ApplicationLoadBalancerStickySessions:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  S3Bucket:
    Type: String
  Vpc:
    Type: String
  PublicSubnetAz1:
    Type: String
  PublicSubnetAz2:
    Type: String
Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: ECS Security Group Ingress HTTP
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - Description: ECS Security Group Egress HTTP
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - Description: ECS Security Group Egress HTTPS
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: ALB Security Group Ingress HTTPS
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ApplicationLoadBalancerCIDRWhitelist
        - Description: ALB Security Group Ingress HTTP (re-directed to HTTPS)
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ApplicationLoadBalancerCIDRWhitelist
      SecurityGroupEgress:
        - Description: ALB Security Group Egress HTTPS
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - Description: ALB Security Group Egress HTTP 
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
  AlbSecurityGroupHTTPEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: ALB Security Group Egress HTTP
      DestinationSecurityGroupId: !Ref EcsSecurityGroup
      FromPort: 80
      ToPort: 80
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: "tcp"
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: 80
      TargetType: "ip"
      Protocol: "HTTP"
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: !Ref ApplicationLoadBalancerStickySessions
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "true"
        - Key: "access_logs.s3.bucket"
          Value: !Ref S3Bucket
        - Key: "access_logs.s3.prefix"
          Value: "logs"
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !Ref PublicSubnetAz1
        - !Ref PublicSubnetAz2
      Scheme: "internet-facing"

  LoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          Type: "forward"
          TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
  ECRRepository:
    Type: AWS::ECR::Repository
  ECSTaskExecutionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
  ECSTaskExecutionIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ResourceName}-ecs-task-execution-policy
      Roles:
        - !Ref ECSTaskExecutionIAMRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*"
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*:log-stream:*"
          - Effect: Allow
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchCheckLayerAvailability
            Resource:
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepository}"
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource:
              - "*"

  ECSTaskIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
  ECSTaskIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ResourceName}-ecs-task-policy
      Roles:
        - !Ref ECSTaskIAMRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "bedrock:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kendra:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - "arn:aws:s3:::*"
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*:log-stream:*"
  
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${ResourceName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Name: "bedrock-app-container"
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      Cpu: "1024"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionIAMRole.Arn
      Family: !Sub "${ResourceName}"
      Memory: "2048"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !GetAtt ECSTaskIAMRole.Arn
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ResourceName}-cluster"
      ClusterSettings:
        - Name: "containerInsights"
          Value: "disabled"
  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn: LoadBalancerHTTPListener
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DesiredCount: 0
      LaunchType: "FARGATE"
      LoadBalancers:
        - ContainerName: "bedrock-app-container"
          ContainerPort: 80
          TargetGroupArn: !Ref DefaultTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PublicSubnetAz1
            - !Ref PublicSubnetAz2
      SchedulingStrategy: "REPLICA"
      ServiceName: !Sub "${ResourceName}"
      TaskDefinition: !Ref ECSTaskDefinition
Outputs:
  ECRRepository:
    Value: !Ref ECRRepository
  ECSCluster:
    Value: !Ref ECSCluster
  ECSService:
    Value: !GetAtt ECSService.Name
  ApplicationLoadBalancer:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  